(let ((form args))
  (if (not (= (len form) 4))
      (err E_ARGS (cat "loop takes 4 arguments (" (len form)" provided: " form ".)"))
      (let ((loopvars (get form 0))
            (initvals (get form 1))
            (cont-symbol (get form 2))
            (body (get form 3)))
        (if (not (istype loopvars "sym"))
            (err E_ARGS "first argument to loop must be a symbol")
            nil)
        (if (not (istype initvals "list"))
            (err E_ARGS "second argument to loop must be a list")
            nil)
        (if (not (istype cont-symbol "sym"))
            (err E_ARGS "third argument to loop must be a symbol")
            nil)
        `(let ((_CONT (call-cc (lambda (_cont)
                                 (_cont (list _cont ,initvals)))))
               (,loopvars (get _CONT 1))
               (,cont-symbol (lambda (vals)
                               ;; avoid nasty surprises
                               (let ((realvals (if (istype vals "list") vals (list vals)))
                                     (continuation (get _CONT 0)))
                                 (call continuation (list (list continuation realvals)))))))
           ,body))))
