112
0
1

10
level
(0)
7
0
0
5
.
name
("Code Utilities")
7
0
0
5
.
pubread
(0)
7
0
0
5
.
pubwrite
(0)
7
0
0
5
.
fertile
(1)
7
0
0
5
.
owner
(#7)
7
0
0
5
.
location
(#7)
7
0
0
5
.
aliases
(("Code Utilities"))
7
0
0
5
.
description
("Code Utilities")
7
0
0
5
.
contents
(())
112
0
0
5
.
5
macro-letf

.
7
0
oThis pNone oThis
5
.
make-extractor

.
7
0
oThis pNone oThis
5
.
loop
(let ((form args))
  (if (not (= (len form) 4))
      (err E_ARGS (cat "loop takes 4 arguments (" (len form)" provided: " form ".)"))
      (let ((loopvars (get form 0))
            (initvals (get form 1))
            (cont-symbol (get form 2))
            (body (get form 3)))
        (if (not (istype loopvars "sym"))
            (err E_ARGS "first argument to loop must be a symbol")
            nil)
        (if (not (istype initvals "list"))
            (err E_ARGS "second argument to loop must be a list")
            nil)
        (if (not (istype cont-symbol "sym"))
            (err E_ARGS "third argument to loop must be a symbol")
            nil)
        `(let ((_CONT (call-cc (lambda (_cont)
                                 (_cont (list _cont ,initvals)))))
               (,loopvars (get _CONT 1))
               (,cont-symbol (lambda (vals)
                               ;; avoid nasty surprises
                               (let ((realvals (if (istype vals "list") vals (list vals)))
                                     (continuation (get _CONT 0)))
                                 (call continuation (list (list continuation realvals)))))))
           ,body))))
.
7
0
oThis pNone oThis
5
.
setf
(if (not (= (len args) 2))
    (err E_ARGS "setf takes exactly 2 arguments")
    (let ((loc     (get args 0))
          (new-val (get args 1)))
      (cond
       ((istype loc "sym")
        (err E_ARGS "cannot setf an arbitrary symbol"))
       ((or (not (istype loc "list") (> (len loc) 1)))
        (err E_ARGS (cat "what could you possibly hope setf'ing " loc " would achieve?")))
       ((let ((fst
.
7
0
oThis pNone oThis
5
.
pcase
(let ((unify-literal
       (lambda (exp args err-handler)
         (let ((literal (get args 0)))
           (if (= literal exp)
               '()
               (unify-error-mismatch literal exp err-handler)))))

      (unify-rest
       (lambda (exp args err-handler)
         (let ((name (get args 0)))
           (list (list name exp)))))

      (pcase-special-table
       (table `(literal (("sym") ,unify-literal))
              `(rest    (("sym") ,unify-rest))))

      (special-symbols
       (lambda (special-table)
         (map (lambda (x) (symbol (cat "&" ($ (head x))))) (tpairs special-table))))

      (unify-error-mismatch
       (lambda (pat exp err-handler)
         (err-handler 'mismatch "Mismatch" pat exp)))

      (unify-mismatch-ignoring-handler
       (lambda (err-handler)
         (lambda (err-type helpstr pat exp)
           (unless (= err-type 'mismatch)
             (err-handler err-type helpstr pat exp)))))

      (unify-throwing-handler
       (lambda (err-type helpstr pat exp)
         (err E_ARGS (cat "unify failed:\n"
                          "type:   " err-type "\n"
                          "reason: " hint  "\n"
                          "pat:    " pat "\n"
                          "exp:    " exp "\n"))))

      (special-symbol?
       (lambda (x)
         (and (istype x "sym") (= "&" (substr ($ x) 0 0)))))

      (special-clause?
       (lambda (x)
         (and (istype x "list") (> (len x) 0) (special-symbol? (get x 0)))))

      (unify-listrec
       (lambda (listpat listexp i err-handler)
         (let ((patitem (get listpat i))
               (expitem (get listexp i)))
           (cat
            (if (special-clause? patitem)
                (unify patitem (slice listexp i)
                       (lambda (type hint pat exp)
                         (unify patitem expitem err-handler)))
                (unify patitem expitem err-handler))
            (let ((endofpat (>= i (- (len listpat) 1)))
                  (endofexp (>= i (- (len listexp) 1))))
              (cond
               ((and endofpat endofexp) '())
               (endofpat (err-handler 'mismatch "Expression had too many elements" listpat listexp))
               (endofexp (err-handler 'mismatch "Expression is missing elements" listpat listexp))
               ((unify-listrec listpat listexp (+ i 1) err-handler))))))))
       
      (unify-special
       (lambda (listpat exp err-handler)
         (let ((special-name (symbol (substr ($ (get listpat 0)) 1 -1)))
               (special-entry
                (try (tget pcase-special-table special-name)
                     (if (erristype error E_BOUNDS) nil (err error)))))
           (if (nil? special-entry)
               (err-handler 'unknown-special-pattern
                            (cat "Unknown special pattern " special-name ".")
                            listpat exp)
               (let ((types (get special-entry 0))
                     (fn (get special-entry 1))
                     (patargs (tail listpat)))
                 (call fn (list exp patargs err-handler)))))))

      (unify
       ;; err-handler is a function that takes 4 arguments:
       ;; error kind, reason, the pattern, the expression
       (lambda (pat exp err-handler)
         (cond
          ((istype pat "list")
           (cond
            ((= pat ())
             (if (= exp ())
                 '()
                 (unify-error-mismatch pat exp err-handler)))
            ((special-clause? pat) (unify-special pat exp err-handler))
            ((not (istype exp "list")) (err-handler 'mismatch "Cannot destructure non-array" pat exp))
            ((unify-listrec pat exp 0 err-handler))))
          ((istype pat "sym") (list (list pat exp)))
          ((err-handler 'malformed-pattern "Malformed pattern" pat exp))))))

  (unify '(a (b c1) (&rest c)) '(ayy (bee1 bee2) c) unify-throwing-handler))
.
7
0
oNone pNone oNone
5
.
